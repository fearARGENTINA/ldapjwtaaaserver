#!/bin/bash
set -e

psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    CREATE ROLE $POSTGRES_DB_RO_ROLE;
    CREATE ROLE $POSTGRES_DB_ADMIN_ROLE;
    CREATE DATABASE $POSTGRES_DB_AUTH;
    GRANT CONNECT ON DATABASE $POSTGRES_DB_AUTH TO $POSTGRES_DB_RO_ROLE;
    GRANT CONNECT ON DATABASE $POSTGRES_DB_AUTH TO $POSTGRES_DB_ADMIN_ROLE;
EOSQL

psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB_AUTH" <<-EOSQL
    CREATE SCHEMA $POSTGRES_DB_AUTH;
    GRANT USAGE ON SCHEMA $POSTGRES_DB_AUTH TO $POSTGRES_DB_RO_ROLE;
    GRANT USAGE ON SCHEMA $POSTGRES_DB_AUTH TO $POSTGRES_DB_ADMIN_ROLE;
    CREATE USER $POSTGRES_RO_USER WITH ENCRYPTED PASSWORD '$POSTGRES_RO_PASSWORD';
    ALTER ROLE $POSTGRES_RO_USER IN DATABASE $POSTGRES_DB_AUTH SET search_path TO $POSTGRES_DB_AUTH;
    GRANT $POSTGRES_DB_RO_ROLE TO $POSTGRES_RO_USER;
    CREATE USER $POSTGRES_ADMIN_USER WITH ENCRYPTED PASSWORD '$POSTGRES_ADMIN_PASSWORD';
    ALTER ROLE $POSTGRES_ADMIN_USER IN DATABASE $POSTGRES_DB_AUTH SET search_path TO $POSTGRES_DB_AUTH;
    GRANT $POSTGRES_DB_ADMIN_ROLE TO $POSTGRES_ADMIN_USER;
    CREATE TABLE $POSTGRES_DB_AUTH.secrets (
        id SERIAL NOT NULL,
        "Audience" VARCHAR,
        "SecretKey" VARCHAR,
        PRIMARY KEY (id)
    );
    CREATE TABLE $POSTGRES_DB_AUTH.roles (
        id SERIAL NOT NULL,
        "Role" VARCHAR,
        "DistinguishedName" VARCHAR,
        "SecretId" INTEGER,
        PRIMARY KEY (id),
        FOREIGN KEY("SecretId") REFERENCES $POSTGRES_DB_AUTH.secrets (id)
    );
    GRANT SELECT ON ALL TABLES IN SCHEMA $POSTGRES_DB_AUTH TO $POSTGRES_DB_RO_ROLE;
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA $POSTGRES_DB_AUTH TO $POSTGRES_DB_ADMIN_ROLE;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA $POSTGRES_DB_AUTH TO $POSTGRES_DB_ADMIN_ROLE;
    INSERT INTO $POSTGRES_DB_AUTH.secrets ("Audience", "SecretKey") VALUES ('audience1', 'DUMMY1');
    INSERT INTO $POSTGRES_DB_AUTH.secrets ("Audience", "SecretKey") VALUES ('audience2', 'DUMMY2');
    INSERT INTO $POSTGRES_DB_AUTH.roles ("Role", "DistinguishedName", "SecretId") VALUES ('Role1', 'CN=Role1,OU=Grupos de seguridad,DC=domain,DC=local', 1);
    INSERT INTO $POSTGRES_DB_AUTH.roles ("Role", "DistinguishedName", "SecretId") VALUES ('Role2', 'CN=Role2,OU=Grupos de seguridad,DC=domain,DC=local', 2);
    INSERT INTO $POSTGRES_DB_AUTH.roles ("Role", "DistinguishedName", "SecretId") VALUES ('Role3', 'CN=Role3,OU=Grupos de seguridad,DC=domain,DC=local', 3);
    INSERT INTO $POSTGRES_DB_AUTH.roles ("Role", "DistinguishedName", "SecretId") VALUES ('Role4', 'CN=Role4,OU=Grupos de seguridad,DC=domain,DC=local', 4);
    INSERT INTO $POSTGRES_DB_AUTH.roles ("Role", "DistinguishedName", "SecretId") VALUES ('Role5', 'CN=Role5,OU=Grupos de seguridad,DC=domain,DC=local', 5);
    CREATE TABLE $POSTGRES_DB_AUTH.users (
        "Username" VARCHAR NOT NULL,
        "LastTOTP" VARCHAR DEFAULT '',
        "TOTPSeed" VARCHAR,
        "Blocked" BOOLEAN DEFAULT FALSE,
        "BlockedUntil" TIMESTAMP WITHOUT TIME ZONE DEFAULT NULL,
        "FailTOTPCount" INTEGER DEFAULT 0,
        "FailPasswordCount" INTEGER DEFAULT 0,
        PRIMARY KEY ("Username")
    );
    GRANT SELECT, INSERT, UPDATE ON TABLE $POSTGRES_DB_AUTH.users TO $POSTGRES_DB_ADMIN_ROLE;
EOSQL